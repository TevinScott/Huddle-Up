<?php
/**
 * Created by PhpStorm.
 * User: Scotty
 * Date: 3/15/18
 * Time: 1:32 PM
 */
error_reporting(E_ALL);

/**
 * this function simply echos the list of errorMessages generated by it's helper functions that have appended error
 * messages to the outputText array.
 * @param $postformData the array returned from the form originally named $_POST
 * @return array the list of errors pertaining to all input fields' validity
 */
function allErrorMessages($postformData){
    $listOfErrors = Array();
    $listOfErrors = array_merge($listOfErrors, checkHuddleName($postformData['name'], 25));
    $listOfErrors = array_merge($listOfErrors, checkHuddleDesc($postformData['description'], 200));
    $listOfErrors = array_merge($listOfErrors, checkCapacity($postformData['capacity'], array("Unlimited", 5, 10, 20)));
    if(array_key_exists('passcode', $postformData)) {
        $listOfErrors = array_merge($listOfErrors, checkPasscode($postformData['passcode']));
    }
    if(sizeof($listOfErrors) > 0){
        return $listOfErrors;
    }
    else {
        return false;
    }
}

/**
 * this should be changed to display the error in an alert box instead
 * @param $postformData returned from the array
 * @return string
 */
function returnErrorMessages($postformData){
    $arrayOfErrors = allErrorMessages($postformData);
    if(sizeof($arrayOfErrors) > 0) {
        $outputTextString = "";
        foreach ($arrayOfErrors as $key => $value) {
            $outputTextString = $outputTextString."<p>"."\n{$value} </p>"."<br\>";
        }
        return $outputTextString;
    } else {
        return "no errors found";
    }

}

/**
* this function is a helper for the allErrorMessages function the goal of this helper is to validate the Huddle String
* given.
* @param $Huddlename the name of the Huddle given
* @param $maxLength the maximum length the Huddle name String should be represented as an Integer value
* @return array the outputted list of errors pertaining to this given field's validity
 */
function checkHuddleName($Huddlename, $maxLength){
    $errorMessage = Array();
    if(strlen($Huddlename) < 1) {
        $errorMessage["huddlenNameRequiredError"] ="the huddle name is a required field";
    }
    if((strlen($Huddlename) < 2) &&  (strlen($Huddlename) > 0)) {
        $errorMessage["huddleNameTooShortError"] ="the huddle name is too short";
    }
    if(strlen($Huddlename) > $maxLength) {
        $errorMessage["huddleNameTooLongError"] ="the huddle name is too long";
    }
    return $errorMessage;
}

/**
 * this function is a helper for the allErrorMessages function the goal of this helper is to validate the Huddle's
 * description text
 * @param $huddleDesc the huddle description string given.
 * @param $maxLength the maximum length the huddle Desc should be represented as an Integer value.
 * @return array the outputted list of errors pertaining to this given field's validity.
 */
function checkHuddleDesc($huddleDesc, $maxLength) {
    $errorMessage = Array();
    if(strlen($huddleDesc) > $maxLength) {
        $errorMessage["huddleDescTooLongError"] ="this Huddle description is too long";
    }
    return $errorMessage;
}

/**
 * this function is a helper for the allErrorMessages function the goal of this helper is to validate the
 * Huddle capacity given.
 * @param $postHuddleCapacity the maximum possible capacity for a huddle event value given.
 * @return array the outputted list of errors pertaining to this given field's validity.
 */
function checkCapacity($postHuddleCapacity, $optionsList){
    $errorMessage = Array();
    if(strlen($postHuddleCapacity) < 1){
        $errorMessage["capacityRequired"] = "the Huddle's capacity is a required Field";
    }
    if(!in_array($postHuddleCapacity, $optionsList)){
        $errorMessage["invalid".$postHuddleCapacity."OptionError"] = "the Huddle Capacity option does not exist";
    }
    return $errorMessage;
}
/**
 * this function is a helper for the allErrorMessages function the goal of this helper is to validate the
 * passcodeValue given
 * @param $passcodeValue the passcode that will be vailidated by this function
 * @return array the outputted list of errors pertaining to this given field's validity.
 */
function checkPasscode($passcodeValue){
    $errorMessage = Array();
    if(!preg_match('/^-?\d+$/', $passcodeValue)){
        $errorMessage["capacityNaNError"] = "the passcode: ".$passcodeValue." given is not a numeric value of 4 to 10 digits in length";
    }
    if(is_numeric($passcodeValue) && $passcodeValue > 999999999){
        $errorMessage["passcodeTooLongError"] = "the passcode given is greater than 10 digits long";
    }
    if(is_numeric($passcodeValue) && $passcodeValue < 1000 && $passcodeValue > 0){
        $errorMessage["passcodeTooShortError"] = "the passcode given is less than 4 digits long";
    }
    return $errorMessage;
}
?>
<?php
/**
 * Created by PhpStorm.
 * User: Scotty
 * Date: 3/15/18
 * Time: 1:32 PM
 */
error_reporting(E_ALL);

/**
 * this function simply echos the list of errorMessages generated by it's helper functions that have appended error
 * messages to the outputText array.
 * @param $postformData the array returned from the form originally named $_POST
 * @return array the list of errors pertaining to all input fields' validity
 */
function allErrorMessages($postformData){
    $listOfErrors = Array();
    $listOfErrors = array_merge($listOfErrors, checkUsername($postformData['username'], 10, false));
    $listOfErrors = array_merge($listOfErrors, checkPassword($postformData['password']));

    if(sizeof($listOfErrors) > 0){
        return $listOfErrors;
    }
    else {
        return false;
    }
}

/**
 * this should be changed to display the error in an alert box instead
 * @param $postformData returned from the array
 * @return string
 */
function returnErrorMessages($postformData){
    $arrayOfErrors = allErrorMessages($postformData);
    if(sizeof($arrayOfErrors) > 0) {
        $outputTextString = "";
        foreach ($arrayOfErrors as $key => $value) {
            $outputTextString = "<p>".$outputTextString."\n{$key} => {$value} </p>"."<br\>";
        }
        return $outputTextString;
    } else {
        return "no errors found";
    }

}
/**
 * this function is a helper for the allErrorMessages function the goal of this helper is to validate the userName
 * given.
 * @param $postUsername the username given
 * @param $maxLength the maximum length the username should be represented as an Integer value
 * @param $spacesAllowed a boolean value specifying if spaces are permitted in the username field
 * @return array the outputted list of errors pertaining to this given field's validity
 */
function checkUsername($postUsername, $maxLength, $spacesAllowed){
    $errorMessage = Array();
    if(strlen($postUsername) < 1 ) {
        $errorMessage["usernameRequiredError"] ="This Username name is a required field";
    }
    if((strlen($postUsername) < 5) &&  (strlen($postUsername) > 0)) {
        $errorMessage["usernameTooShortError"] ="This Username is too short";
    }

    if(!$spacesAllowed && preg_match("/\\p{Z}/", $postUsername)){
        $errorMessage["usernameSpaceError"] = "This Username contains white spaces";
    }
    if(!preg_match("/^[a-zA-Z\s]+$/", $postUsername)){
        $errorMessage["usernameInvalidCharsError"] = "This username contains characters beyond A-Z";
    }
    if(strlen($postUsername) > $maxLength) {
        $errorMessage["usernameTooLongError"] ="this username is too long";
    }
    return $errorMessage;
}

/**
 * this function is a helper for the allErrorMessages function the goal of this helper is to validate the
 * password Value given
 * @param $passwordValue the password which will be vaildated by this function
 * @return array the outputted list of errors pertaining to this given field's validity.
 */
function checkPassword($passwordValue){
    $errorMessage = Array();
    if(!preg_match("[a-zA-Z]$/", $passwordValue)){
        $errorMessage["passwordLetterError"] = "the password given contains no letters";
    }
    if(!preg_match("\d$/", $passwordValue)){
        $errorMessage["passwordNaNError"] = "the password given does not contain a number";
    }
    if($passwordValue > 10){
        $errorMessage["passwordTooLongError"] = "the password given is too long";
    }
    if($passwordValue < 4){
        $errorMessage["passwordTooShortError"] = "the password given is too short";
    }
    return $errorMessage;
}
?>